{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","items","createReducer","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReduser","devTools","process","persistor","persistStore","getContacts","getFilter","getVisibleContacts","contacts","contact","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","useForm","register","control","handleSubmit","errors","reset","className","s","form","onSubmit","find","alert","autoComplete","label","htmlFor","input","type","ref","required","text","defaultValue","render","onChange","value","format","mask","allowEmptyFormatting","btn","ContactItem","onClick","ContactList","list","map","Filter","e","target","App","ReactDOM","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.7a5040c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2TEm0\"};","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nexport const deleteContact = createAction('contacts/delete');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReduser from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: persistReducer(contactsPersistConfig, contactsReduser),\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","export const getContacts = state => state.items;\nexport const getFilter = state => state.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n","import { useForm, Controller } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport NumberFormat from 'react-number-format';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport { addContact } from '../../redux/contacts/contacts-actions';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const { register, control, handleSubmit, errors, reset } = useForm();\n\n  const addNewContact = ({ name, number }) => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      reset({\n        name: '',\n        number: '',\n      });\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    reset({\n      name: '',\n      number: '',\n    });\n  };\n\n  return (\n    <form\n      className={s.form}\n      onSubmit={handleSubmit(addNewContact)}\n      autoComplete=\"off\"\n    >\n      <label className={s.label} htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        className={s.input}\n        name=\"name\"\n        type=\"text\"\n        ref={register({ required: true })}\n      />\n      {errors.name && <p className={s.text}>This field is required!</p>}\n\n      <label className={s.label} htmlFor=\"number\">\n        Number\n      </label>\n      <Controller\n        name=\"number\"\n        control={control}\n        defaultValue={false}\n        render={({ onChange, value }) => (\n          <NumberFormat\n            className={s.input}\n            type={'tel'}\n            format=\"+380 (##) ###-####\"\n            mask=\"_\"\n            allowEmptyFormatting\n            value={value}\n            onChange={onChange}\n          />\n        )}\n      />\n      {errors.number && <p className={s.text}>This field is required!</p>}\n      {errors.number?.type === 'pattern' && (\n        <p className={s.text}>Phone number is not valid!</p>\n      )}\n\n      <button className={s.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, deleteContact }) => {\n  return (\n    <li>\n      {name}: {number}\n      <button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport { deleteContact } from '../../redux/contacts/contacts-actions';\nimport ContactItem from './ContactItem/ContactItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={id => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import './App.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { store, persistor } from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__40RkM\",\"label\":\"ContactForm_label__DfbUu\",\"input\":\"ContactForm_input__3lg1Q\",\"btn\":\"ContactForm_btn__34LfF\",\"text\":\"ContactForm_text__2PC9y\"};"],"sourceRoot":""}